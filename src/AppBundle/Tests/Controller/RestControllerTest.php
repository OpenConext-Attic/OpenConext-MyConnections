<?php

namespace AppBundle\Tests\Controller;

use AppBundle\Entity\Connection;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Doctrine\Bundle\DoctrineBundle\Registry;

class RestControllerTest extends WebTestCase
{
    /**
     * @var Connection
     */
    protected $connection;

    private $test_uid = 'created-by-restcontroller-test';
    private $test_service = 'phpunit';
    private $test_cuid = '000-000-000-000';

    /**
     * @var Registry
     */
    protected $doctrine;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        self::bootKernel();
        $this->doctrine = static::$kernel->getContainer()
            ->get('doctrine');

        $this->addTestConnection();
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->removeTestConnection();
    }

    public function testConnections()
    {
        $client = $this->createClient();

        $client->request(
            'GET',
            '/api/connections/not-available'
        );

        // Non existing connection
        $this->assertEquals(
            404,
            $client->getResponse()->getStatusCode()
        );

        $this->assertEquals(
            'application/json',
            $client->getResponse()->headers->get('Content-Type')
        );

        $json = json_decode($client->getResponse()->getContent());
        $this->assertObjectHasAttribute('error', $json);

        $client->request(
            'GET',
            '/api/connections/' . $this->connection->getUid()
        );

        $this->assertEquals(
            200,
            $client->getResponse()->getStatusCode()
        );

        $this->assertEquals(
            'application/json',
            $client->getResponse()->headers->get('Content-Type')
        );

        $json = json_decode($client->getResponse()->getContent());
        $this->assertTrue(is_array($json), 'Expected Array in JSON response');
        $this->assertCount(1, $json);
        $this->assertObjectHasAttribute("service", $json[0]);
        $this->assertObjectHasAttribute("established_at", $json[0]);
        $this->assertObjectHasAttribute("cuid", $json[0]);
    }

    public function testRemoveConnection()
    {
        $client = $this->createClient();

        $client->request(
            'DELETE',
            '/api/connections/not-available/service/not-available'
        );

        $this->assertEquals(404, $client->getResponse()->getStatusCode());

        $client->request(
            'DELETE',
            '/api/connections/' .
            $this->connection->getUid() .
            '/services/' .
            $this->connection->getService()
        );

        $this->assertEquals(202, $client->getResponse()->getStatusCode());
        $this->addTestConnection();
    }

    public function testAddConnection()
    {
        $this->removeTestConnection();
        $client = $this->createClient();

        $json = '{
            "connection" :
            {
               "uid" : "' . $this->test_uid . '",
               "service" : "' . $this->test_service . '",
               "cuid" : "' . $this->test_cuid . '"
            }
        }';
        $client->request(
            'POST',
            '/api/connections',
            array(),
            array(),
            [
                'CONTENT_TYPE' => 'application/json'
            ],
            $json
        );
        $this->assertEquals(201, $client->getResponse()->getStatusCode());

        $json = '{
            "connection" :
            {
               "service" : "' . $this->test_service . '",
               "cuid" : "' . $this->test_cuid . '"
            }
        }';
        $client->request(
            'POST',
            '/api/connections',
            array(),
            array(),
            [
                'CONTENT_TYPE' => 'application/json'
            ],
            $json
        );
        $this->assertNotEquals(201, $client->getResponse()->getStatusCode());

        $json = '{
            "connection" :
            {
               "uid" : "' . $this->test_uid . '",
               "cuid" : "' . $this->test_cuid . '"
            }
        }';
        $client->request(
            'POST',
            '/api/connections',
            array(),
            array(),
            [
                'CONTENT_TYPE' => 'application/json'
            ],
            $json
        );
        $this->assertNotEquals(201, $client->getResponse()->getStatusCode());

        $json = '{
            "connection" :
            {
               "uid" : "' . $this->test_uid . '",
               "service" : "' . $this->test_service . '",
            }
        }';
        $client->request(
            'POST',
            '/api/connections',
            array(),
            array(),
            [
                'CONTENT_TYPE' => 'application/json'
            ],
            $json
        );
        $this->assertNotEquals(201, $client->getResponse()->getStatusCode());
    }

    private function addTestConnection()
    {
        $this->connection = new Connection();
        $this->connection->setUid($this->test_uid);
        $this->connection->setService($this->test_service);
        $this->connection->setEstablishedAt(new \DateTime());
        $this->connection->setCuid($this->test_cuid);

        $this->doctrine->getManager()->persist($this->connection);
        $this->doctrine->getManager()->flush();
    }

    private function removeTestConnection()
    {
        $connection = $this->doctrine
            ->getRepository('AppBundle:Connection')
            ->find(
                [
                    'uid' => $this->test_uid,
                    'service' => $this->test_service
                ]
            );

        if (NULL !== $connection) {
            $this->doctrine->getManager()->remove($connection);
            $this->doctrine->getManager()->flush();
        }
    }
}
